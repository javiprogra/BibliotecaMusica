@page "/"
@using Models;

@inject Blazored.LocalStorage.ISyncLocalStorageService localStorage

<h1>Ingreso de Canciones</h1>


<EditForm Model="@cancion" OnValidSubmit="@GuardarCancion">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="container text-center">
        <div class="row mt-3">
            <h2>Canción:</h2>
            <div class="col">
                <p>
                    <label for="identifier" class="form-label">Nombre de la canción: </label>
                    <InputText id="identifier" class="form-control" @bind-Value="cancion.nombre" />
                    <ValidationMessage For="() => cancion.nombre" />
                </p>

                <p>
                    <label for="identifier" class="form-label">Artista: </label>
                    <InputText id="identifier" class="form-control" @bind-Value="cancion.artista" />
                    <ValidationMessage For="() => cancion.artista" />
                </p>

                <p>
                    <label for="identifier" class="form-label">Duración: </label>
                    <InputText id="identifier" class="form-control" @bind-Value="cancion.duracion" />
                    <ValidationMessage For="() => cancion.duracion" />
                </p>


            </div>
            
        </div>
    </div>
    <p>
        <div class="row text-center mt-3">
            <div class="col">
                <button class="btn btn-secondary" type="submit">Guardar canción</button>
            </div>
        </div>
    </p>
</EditForm>


<EditForm Model="@album" OnValidSubmit="@GuardarAlbum">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="container text-center">
        <div class="row mt-3">
            <h2>Álbum:</h2>
            <div class="col">
                <p>
                    <label for="identifier" class="form-label">Nombre del albúm: </label>
                    <InputText id="identifier" class="form-control" @bind-Value="album.tituloAlbum" />
                    <ValidationMessage For="() => album.tituloAlbum" />
                </p>

                <p>
                    <label for="identifier" class="form-label">Artista: </label>
                    <InputText id="identifier" class="form-control" @bind-Value="album.artistaAlbum" />
                    <ValidationMessage For="() => album.artistaAlbum" />
                </p>

                <p>
                    <label for="productionDate">Fecha de publicación: </label>
                    <InputDate id="productionDate" class="form-control" @bind-Value="album.fechaPublicacion" />
                    <ValidationMessage For="() => album.fechaPublicacion" />
                </p>

                <div class="row justify-content-center mt-3">
                    @if (cancionesDisponibles.Any())
                    {
                        <h4 class="text-center">Canciones para este álbum:</h4>
                        @foreach (var cancion in cancionesDisponibles)
                        {
                            <div class="col-6 d-flex align-items-center justify-content-start mb-2">
                                <input class="form-check-input me-2" type="checkbox"
                                       checked="@cancionesSeleccionadas.Contains(cancion)"
                                       @onchange="(e) => SeleccionarCancion(e.Value, cancion)" />

                                <label class="form-check-label">
                                    @cancion.nombre - @cancion.artista (@cancion.duracion)
                                </label>
                            </div>
                        }
                    }
                </div>
                        
                @foreach (var a in albumes)
                {
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        <span>
                            <strong>@a.tituloAlbum</strong> - @a.artistaAlbum (@a.fechaPublicacion.ToShortDateString())
                        </span>
                        <div>
                            <button class="btn btn-sm btn-primary me-2" @onclick="() => EditarAlbum(a)">Editar</button>
                            <button class="btn btn-sm btn-danger" @onclick="() => EliminarAlbum(a)">Eliminar</button>
                        </div>
                    </li>
                }   

                @if (albumEditado != null)
                {
                    <button class="btn btn-warning mt-2" @onclick="CancelarEdicion">Cancelar edición</button>
                }
             </div>
        </div>
    </div>
    <p>
        <div class="row text-center mt-3">
            <div class="col">
                <button class="btn btn-secondary" type="submit">Guardar álbum</button>
            </div>
        </div>
    </p>
</EditForm>

@code {
    private Cancion cancion = new Cancion();
    private List<Cancion> canciones = new List<Cancion>();

    private Album album = new Album();
    private List<Album> albumes = new List<Album>();

    private List<Cancion> cancionesDisponibles = new List<Cancion>();
    private HashSet<Cancion> cancionesSeleccionadas = new(); // Las que el usuario elige

    private Album albumEditado = null;

    private void GuardarCancion()
    {
        // Recuperar las canciones que ya estaban guardadas
        canciones = localStorage.GetItem<List<Cancion>>("canciones") ?? new List<Cancion>();
        // Agregar la nueva
        canciones.Add(cancion);
        // Guardar la lista actualizada
        localStorage.SetItem("canciones", canciones);
        // Limpiar el formulario
        cancion = new Cancion();
        // Actualizar la lista disponible para los álbumes
        cancionesDisponibles = canciones;
    }

    private void GuardarAlbum()
    {
        album.canciones = cancionesSeleccionadas.ToList();

        // Cargar álbumes guardados
        albumes = localStorage.GetItem<List<Album>>("albumes") ?? new List<Album>();

        if (albumEditado != null)
        {
            // reemplaza el álbum viejo por el nuevo
            var index = albumes.FindIndex(x => x.Id == albumEditado.Id);
            if (index != -1)
            {
                albumes[index] = album;
            }

            albumEditado = null;
        }
        else
        {
            // NUEVO
            album.Id = Guid.NewGuid();
            albumes.Add(album);
        }

        // Guardar
        localStorage.SetItem("albumes", albumes);

        // Reset
        album = new Album();
        cancionesSeleccionadas.Clear();
    }

    private void EditarAlbum(Album a)
    {
        album = new Album
        {
            Id = a.Id,
            tituloAlbum = a.tituloAlbum,
            artistaAlbum = a.artistaAlbum,
            fechaPublicacion = a.fechaPublicacion,
            canciones = new List<Cancion>(a.canciones)
        };

        cancionesSeleccionadas = new HashSet<Cancion>(a.canciones);
        albumEditado = a; //referencia al álbum original que se está editando
    }

    private void CancelarEdicion()
    {
        album = new Album();
        cancionesSeleccionadas.Clear();
        albumEditado = null;
    }

    private void SeleccionarCancion(object checkedValue, Cancion cancion)
    {
        bool isChecked = (bool)checkedValue;

        if (isChecked)
            cancionesSeleccionadas.Add(cancion);
        else
            cancionesSeleccionadas.Remove(cancion);
    }

    private void EliminarAlbum(Album a)
    {
        albumes.Remove(a);
        localStorage.SetItem("albumes", albumes);

        // Si se estaba editando este álbum, reiniciar el formulario
        if (albumEditado == a)
        {
            album = new Album();
            cancionesSeleccionadas.Clear();
            albumEditado = null;
        }
    }

    protected override void OnInitialized()
    {
        //Cargar canciones y albumes guardados
        cancionesDisponibles = localStorage.GetItem<List<Cancion>>("canciones") ?? new List<Cancion>();
        albumes = localStorage.GetItem<List<Album>>("albumes") ?? new List<Album>();
    } 
}